- name: deploy to EC2
  hosts: localhost
  connection: local

  tasks:
    - name: Launch EC2 Instance
      ec2_instance: 
        name: "eshop - semestral work"
        instance_type: t3.medium
        image_id: ami-07caf09b362be10b8
        region: us-east-1
        key_name: test
        vpc_subnet_id: subnet-00d0d44cdf925df2c
        tags:
          name: myEshop
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
    - service:
        name: docker
        state: started
        enabled: yes
    - name: Set proper rights to Docker service
      shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from git
      git:
        repo: 'https://github.com/vokounovaeliska/4IT572_semestral_project.git'
        dest: ./app

    - name: Build Eshop Docker image
      shell: cd app && docker build -t myeshop:latest .
      become: yes
    - name: Run Docker with eshop
      shell: docker run -p 80:3000 myeshop
      async: 45
      poll: 0
      become: yes
    - wait_for:
        port:
          80

    - name: Get instance details
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "myEshop"
        region: us-east-1
      register: ec2_info

    - name: Sort by oldest instances
      set_fact:
        instances_to_terminate: "{{ ec2_info.instances | sort(attribute='launch_time') | map(attribute='id') | list }}"

    - name: Terminate instances
      amazon.aws.ec2_instance:
        state: absent
        instance_ids: "{{ instances_to_terminate[:-(exact_count|int)] }}"
      when: instances_to_terminate | length > exact_count|int